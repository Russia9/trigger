package bot

import (
	"context"
	"fmt"
	"gopkg.in/telebot.v3"
	"regexp"
)

var DeleteCommand = regexp.MustCompile("-—Ç—Ä–∏–≥–≥–µ—Ä\\s+(.*)")

func (b *Bot) Delete(ctx telebot.Context) error {
	// Check if the message is from a group
	if !ctx.Message().FromGroup() {
		return ctx.Reply("üö´ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–∞—Ö")
	}

	// Get Chat member
	member, err := b.bot.ChatMemberOf(ctx.Chat(), ctx.Message().Sender)
	if err != nil {
		return err
	}

	// Check if the user is an admin
	if member.Role != telebot.Creator && member.Role != telebot.Administrator {
		return ctx.Reply("üö´ –£–¥–∞–ª—è—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä—ã –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω")
	}

	// Check if the command is valid
	if !DeleteCommand.MatchString(ctx.Text()) {
		return ctx.Reply("üö´ –ù–µ —É–∫–∞–∑–∞–Ω —Ç—Ä–∏–≥–≥–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å")
	}

	// Parse command
	trigger := DeleteCommand.FindStringSubmatch(ctx.Text())[1]

	// Delete trigger
	count, err := b.repo.Delete(context.Background(), trigger, ctx.Chat().ID)
	if err != nil {
		return err
	}

	if count == 0 {
		return ctx.Reply("‚ö†Ô∏è –¢—Ä–∏–≥–≥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
	}

	return ctx.Reply(fmt.Sprintf("‚úÖ –£–¥–∞–ª–µ–Ω–æ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤: %d", count))
}
